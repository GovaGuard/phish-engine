// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/usecase/contracts.go
//
// Generated by this command:
//
//	mockgen -source ./internal/usecase/contracts.go -package usecase_test
//

// Package usecase_test is a generated GoMock package.
package usecase_test

import (
	reflect "reflect"

	entity "github.com/holgerson97/phish-engine/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockCampaigns is a mock of Campaigns interface.
type MockCampaigns struct {
	ctrl     *gomock.Controller
	recorder *MockCampaignsMockRecorder
	isgomock struct{}
}

// MockCampaignsMockRecorder is the mock recorder for MockCampaigns.
type MockCampaignsMockRecorder struct {
	mock *MockCampaigns
}

// NewMockCampaigns creates a new mock instance.
func NewMockCampaigns(ctrl *gomock.Controller) *MockCampaigns {
	mock := &MockCampaigns{ctrl: ctrl}
	mock.recorder = &MockCampaignsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCampaigns) EXPECT() *MockCampaignsMockRecorder {
	return m.recorder
}

// AddCampaign mocks base method.
func (m *MockCampaigns) AddCampaign(arg0 entity.Campaign) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddCampaign", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddCampaign indicates an expected call of AddCampaign.
func (mr *MockCampaignsMockRecorder) AddCampaign(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCampaign", reflect.TypeOf((*MockCampaigns)(nil).AddCampaign), arg0)
}

// DeleteAllCampaigns mocks base method.
func (m *MockCampaigns) DeleteAllCampaigns() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAllCampaigns")
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllCampaigns indicates an expected call of DeleteAllCampaigns.
func (mr *MockCampaignsMockRecorder) DeleteAllCampaigns() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllCampaigns", reflect.TypeOf((*MockCampaigns)(nil).DeleteAllCampaigns))
}

// DeleteCampaign mocks base method.
func (m *MockCampaigns) DeleteCampaign(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCampaign", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCampaign indicates an expected call of DeleteCampaign.
func (mr *MockCampaignsMockRecorder) DeleteCampaign(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCampaign", reflect.TypeOf((*MockCampaigns)(nil).DeleteCampaign), arg0)
}

// GetActiveCampaigns mocks base method.
func (m *MockCampaigns) GetActiveCampaigns() ([]entity.Campaign, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActiveCampaigns")
	ret0, _ := ret[0].([]entity.Campaign)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActiveCampaigns indicates an expected call of GetActiveCampaigns.
func (mr *MockCampaignsMockRecorder) GetActiveCampaigns() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActiveCampaigns", reflect.TypeOf((*MockCampaigns)(nil).GetActiveCampaigns))
}

// GetCampaigns mocks base method.
func (m *MockCampaigns) GetCampaigns(arg0 string) ([]entity.Campaign, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCampaigns", arg0)
	ret0, _ := ret[0].([]entity.Campaign)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCampaigns indicates an expected call of GetCampaigns.
func (mr *MockCampaignsMockRecorder) GetCampaigns(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCampaigns", reflect.TypeOf((*MockCampaigns)(nil).GetCampaigns), arg0)
}

// WorkCampaign mocks base method.
func (m *MockCampaigns) WorkCampaign() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkCampaign")
	ret0, _ := ret[0].(error)
	return ret0
}

// WorkCampaign indicates an expected call of WorkCampaign.
func (mr *MockCampaignsMockRecorder) WorkCampaign() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkCampaign", reflect.TypeOf((*MockCampaigns)(nil).WorkCampaign))
}

// MockTargets is a mock of Targets interface.
type MockTargets struct {
	ctrl     *gomock.Controller
	recorder *MockTargetsMockRecorder
	isgomock struct{}
}

// MockTargetsMockRecorder is the mock recorder for MockTargets.
type MockTargetsMockRecorder struct {
	mock *MockTargets
}

// NewMockTargets creates a new mock instance.
func NewMockTargets(ctrl *gomock.Controller) *MockTargets {
	mock := &MockTargets{ctrl: ctrl}
	mock.recorder = &MockTargetsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTargets) EXPECT() *MockTargetsMockRecorder {
	return m.recorder
}

// AddTarget mocks base method.
func (m *MockTargets) AddTarget(arg0 string, arg1 []entity.Target) ([]entity.Target, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTarget", arg0, arg1)
	ret0, _ := ret[0].([]entity.Target)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddTarget indicates an expected call of AddTarget.
func (mr *MockTargetsMockRecorder) AddTarget(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTarget", reflect.TypeOf((*MockTargets)(nil).AddTarget), arg0, arg1)
}

// DeleteTarget mocks base method.
func (m *MockTargets) DeleteTarget(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTarget", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTarget indicates an expected call of DeleteTarget.
func (mr *MockTargetsMockRecorder) DeleteTarget(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTarget", reflect.TypeOf((*MockTargets)(nil).DeleteTarget), arg0)
}

// GetTargets mocks base method.
func (m *MockTargets) GetTargets(arg0 string) ([]entity.Target, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTargets", arg0)
	ret0, _ := ret[0].([]entity.Target)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTargets indicates an expected call of GetTargets.
func (mr *MockTargetsMockRecorder) GetTargets(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTargets", reflect.TypeOf((*MockTargets)(nil).GetTargets), arg0)
}
