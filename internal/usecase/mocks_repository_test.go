// Code generated by MockGen. DO NOT EDIT.
// Source: ./repository/contracts.go
//
// Generated by this command:
//
//	mockgen -source=./repository/contracts.go -package usecase_test
//

// Package usecase_test is a generated GoMock package.
package usecase_test

import (
	reflect "reflect"

	entity "github.com/holgerson97/phish-engine/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockCampaignRepo is a mock of CampaignRepo interface.
type MockCampaignRepo struct {
	ctrl     *gomock.Controller
	recorder *MockCampaignRepoMockRecorder
	isgomock struct{}
}

// MockCampaignRepoMockRecorder is the mock recorder for MockCampaignRepo.
type MockCampaignRepoMockRecorder struct {
	mock *MockCampaignRepo
}

// NewMockCampaignRepo creates a new mock instance.
func NewMockCampaignRepo(ctrl *gomock.Controller) *MockCampaignRepo {
	mock := &MockCampaignRepo{ctrl: ctrl}
	mock.recorder = &MockCampaignRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCampaignRepo) EXPECT() *MockCampaignRepoMockRecorder {
	return m.recorder
}

// AddCampaign mocks base method.
func (m *MockCampaignRepo) AddCampaign(arg0 entity.Campaign) (entity.Campaign, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddCampaign", arg0)
	ret0, _ := ret[0].(entity.Campaign)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddCampaign indicates an expected call of AddCampaign.
func (mr *MockCampaignRepoMockRecorder) AddCampaign(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCampaign", reflect.TypeOf((*MockCampaignRepo)(nil).AddCampaign), arg0)
}

// DeleteAllCampaigns mocks base method.
func (m *MockCampaignRepo) DeleteAllCampaigns() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAllCampaigns")
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllCampaigns indicates an expected call of DeleteAllCampaigns.
func (mr *MockCampaignRepoMockRecorder) DeleteAllCampaigns() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllCampaigns", reflect.TypeOf((*MockCampaignRepo)(nil).DeleteAllCampaigns))
}

// DeleteCampaign mocks base method.
func (m *MockCampaignRepo) DeleteCampaign(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCampaign", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCampaign indicates an expected call of DeleteCampaign.
func (mr *MockCampaignRepoMockRecorder) DeleteCampaign(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCampaign", reflect.TypeOf((*MockCampaignRepo)(nil).DeleteCampaign), arg0)
}

// GetActiveCampaigns mocks base method.
func (m *MockCampaignRepo) GetActiveCampaigns() ([]entity.Campaign, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActiveCampaigns")
	ret0, _ := ret[0].([]entity.Campaign)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActiveCampaigns indicates an expected call of GetActiveCampaigns.
func (mr *MockCampaignRepoMockRecorder) GetActiveCampaigns() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActiveCampaigns", reflect.TypeOf((*MockCampaignRepo)(nil).GetActiveCampaigns))
}

// GetCampaigns mocks base method.
func (m *MockCampaignRepo) GetCampaigns(arg0 string) ([]entity.Campaign, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCampaigns", arg0)
	ret0, _ := ret[0].([]entity.Campaign)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCampaigns indicates an expected call of GetCampaigns.
func (mr *MockCampaignRepoMockRecorder) GetCampaigns(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCampaigns", reflect.TypeOf((*MockCampaignRepo)(nil).GetCampaigns), arg0)
}

// UpdateCampaign mocks base method.
func (m *MockCampaignRepo) UpdateCampaign(arg0 entity.Campaign) (entity.Campaign, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCampaign", arg0)
	ret0, _ := ret[0].(entity.Campaign)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCampaign indicates an expected call of UpdateCampaign.
func (mr *MockCampaignRepoMockRecorder) UpdateCampaign(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCampaign", reflect.TypeOf((*MockCampaignRepo)(nil).UpdateCampaign), arg0)
}

// MockTargetsRepo is a mock of TargetsRepo interface.
type MockTargetsRepo struct {
	ctrl     *gomock.Controller
	recorder *MockTargetsRepoMockRecorder
	isgomock struct{}
}

// MockTargetsRepoMockRecorder is the mock recorder for MockTargetsRepo.
type MockTargetsRepoMockRecorder struct {
	mock *MockTargetsRepo
}

// NewMockTargetsRepo creates a new mock instance.
func NewMockTargetsRepo(ctrl *gomock.Controller) *MockTargetsRepo {
	mock := &MockTargetsRepo{ctrl: ctrl}
	mock.recorder = &MockTargetsRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTargetsRepo) EXPECT() *MockTargetsRepoMockRecorder {
	return m.recorder
}

// AddTargets mocks base method.
func (m *MockTargetsRepo) AddTargets(arg0 []entity.Target) ([]entity.Target, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTargets", arg0)
	ret0, _ := ret[0].([]entity.Target)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddTargets indicates an expected call of AddTargets.
func (mr *MockTargetsRepoMockRecorder) AddTargets(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTargets", reflect.TypeOf((*MockTargetsRepo)(nil).AddTargets), arg0)
}

// ChangeTargetState mocks base method.
func (m *MockTargetsRepo) ChangeTargetState(arg0 string, arg1 entity.TargetState) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeTargetState", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChangeTargetState indicates an expected call of ChangeTargetState.
func (mr *MockTargetsRepoMockRecorder) ChangeTargetState(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeTargetState", reflect.TypeOf((*MockTargetsRepo)(nil).ChangeTargetState), arg0, arg1)
}

// DeleteTarget mocks base method.
func (m *MockTargetsRepo) DeleteTarget(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTarget", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTarget indicates an expected call of DeleteTarget.
func (mr *MockTargetsRepoMockRecorder) DeleteTarget(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTarget", reflect.TypeOf((*MockTargetsRepo)(nil).DeleteTarget), arg0)
}

// GetTargets mocks base method.
func (m *MockTargetsRepo) GetTargets(arg0 string) ([]entity.Target, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTargets", arg0)
	ret0, _ := ret[0].([]entity.Target)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTargets indicates an expected call of GetTargets.
func (mr *MockTargetsRepoMockRecorder) GetTargets(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTargets", reflect.TypeOf((*MockTargetsRepo)(nil).GetTargets), arg0)
}
